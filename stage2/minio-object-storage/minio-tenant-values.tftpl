# https://github.com/minio/operator/blob/master/helm/tenant/values.yaml
tenant:
  name: minio-tenant

  image:
    repository: quay.io/minio/minio
    tag: RELEASE.2024-05-01T01-11-10Z
    pullPolicy: IfNotPresent
  imagePullSecret: { }
  scheduler: { }
  configuration:
    name: ${tenant_configuration_name}
  pools:
    - servers: ${tenant_pools_servers}
      name: pool-0
      volumesPerServer: 4
      size: ${tenant_pools_size}
      storageClassName: ${tenant_pools_storage_class_name}
      storageAnnotations: { }
      annotations: { }
      labels: { }
      tolerations: [ ]
      nodeSelector: { }
      affinity: { }
      resources: { }
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        runAsNonRoot: true
      containerSecurityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        seccompProfile:
          type: RuntimeDefault
      topologySpreadConstraints: [ ]

  mountPath: /export
  subPath: /data

  metrics:
    enabled: true
    port: 9000
    protocol: http

  certificate:
    externalCaCertSecret: [ ]
    externalCertSecret: [ ]
    # externalCertSecret:
    #   - name: minio-tenant-tls
    #     type: cert-manager.io/v1
    # requestAutoCert: true
    requestAutoCert: false
    certConfig: { }

  features:
    bucketDNS: true
    domains: { }
    enableSFTP: false

  buckets:
    %{ for bucket in tenant_default_buckets ~}
    - name: ${bucket}
    %{ endfor ~}

  users:
    - name: ${tenant_user_access_key}

  podManagementPolicy: Parallel
  liveness: { }
  readiness: { }
  startup: { }
  lifecycle: { }
  exposeServices: { }
  serviceAccountName: ""
  prometheusOperator: false
  logging: { }
  serviceMetadata: { }
  env: [ ]
  priorityClassName: ""
  additionalVolumes: [ ]
  additionalVolumeMounts: [ ]

ingress:
  api:
    enabled: true
    ingressClassName: "${tenant_ingress_class_name}"
    labels: { }
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
      nginx.ingress.kubernetes.io/proxy-buffering: "off"
      # https://github.com/distribution/distribution/issues/970#issuecomment-499228700
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    tls:
      - hosts: ["${tenant_ingress_api_host}"]
        secretName: "minio-tenant-api-tls"
    host: ${tenant_ingress_api_host}
    path: /
    pathType: Prefix
  console:
    enabled: true
    ingressClassName: "${tenant_ingress_class_name}"
    labels: { }
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: ${frontend_basic_auth_secret_name}
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
    tls:
      - hosts: ["${tenant_ingress_console_host}"]
        secretName: "minio-tenant-console-tls"
    host: ${tenant_ingress_console_host}
    path: /
    pathType: Prefix
