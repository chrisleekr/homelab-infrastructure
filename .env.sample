# Terraform
TF_TOKEN_app_terraform_io=

host_machine_architecture=amd64
domain_host=chrislee.local

# Stage 1
kubernetes_cluster_type=kubeadm
# kubernetes_cluster_type=minikube
# kubernetes_cluster_type=k3s

server_ssh_host=192.168.1.100
server_ssh_user=
server_ssh_port=2222

# k3s
k3s_extra_server_args=""
# openssl rand -base64 64 | tr -d '\n'
k3s_token=
k3s_extra_server_args=

sshd_port="${server_ssh_port}"
wireguard_port=51820

docker_default_data_path=/var/lib/docker
# i.e. [{\"ip\":\"192.168.1.100\",\"name\":\"gitlab.chrislee.local\"}]
etc_hosts_json=[]

# Stage 2
TF_VAR_ingress_enable_tls=true # If set false, it will not generate TLS certificates.
# Kubernetes
TF_VAR_host_machine_architecture="${host_machine_architecture}"
TF_VAR_kubernetes_override_ip="${server_ssh_host}"
TF_VAR_kubernetes_override_domains="minio.${domain_host} gitlab.${domain_host} registry.${domain_host} argocd.${domain_host} auth.${domain_host}"

# Nginx
TF_VAR_nginx_service_loadbalancer_ip="${server_ssh_host}"
# htpasswd -nb user password | openssl base64
TF_VAR_nginx_frontend_basic_auth_base64=
TF_VAR_nginx_client_max_body_size=10M
TF_VAR_nginx_client_body_buffer_size=10M

# Cert Manager
TF_VAR_cert_manager_acme_email="chris@${domain_host}"
TF_VAR_cert_manager_ingress_class=nginx
TF_VAR_cert_manager_host_alias_ip="${server_ssh_host}"
# Need hostaliases to workaround hairpin NAT issue.
TF_VAR_cert_manager_host_alias_hostnames="longhorn.${domain_host},minio.${domain_host},minio-console.${domain_host},kas.${domain_host},gitlab.${domain_host},registry.${domain_host},alertmanager.${domain_host},grafana.${domain_host},prometheus.${domain_host},kibana.${domain_host},cost.${domain_host},argocd.${domain_host},auth.${domain_host}"

# Longhorn
TF_VAR_longhorn_default_settings_default_data_path=/var/lib/longhorn
TF_VAR_longhorn_ingress_class_name=nginx
TF_VAR_longhorn_ingress_host="k8s.${domain_host}"

# Minio
TF_VAR_minio_tenant_pools_size=100Gi
TF_VAR_minio_tenant_ingress_class_name=nginx
TF_VAR_minio_tenant_ingress_api_host="minio.${domain_host}"
TF_VAR_minio_tenant_ingress_console_host="minio-console.${domain_host}"

# Gitlab
TF_VAR_gitlab_global_hosts_domain="${domain_host}"
TF_VAR_gitlab_global_hosts_host_suffix=
TF_VAR_gitlab_global_hosts_external_ip="${server_ssh_host}"
TF_VAR_gitlab_global_ingress_class=nginx
TF_VAR_gitlab_global_ingress_provider=nginx
TF_VAR_gitlab_certmanager_issuer_email="chris@${domain_host}"
TF_VAR_gitlab_postgresql_primary_persistence_size=20Gi
TF_VAR_gitlab_redis_master_persistence_size=20Gi
TF_VAR_gitlab_gitlay_persistence_size=20Gi
TF_VAR_gitlab_toolbox_persistence_size=40Gi
# Go to Admin area -> CI/CD -> Runners -> New instance runner
# Make sure to set `Run untagged jobs`
# Copy token and paste here
TF_VAR_gitlab_runner_authentication_token=
TF_VAR_gitlab_minio_host="minio.${domain_host}"
TF_VAR_gitlab_minio_endpoint="https://minio.${domain_host}"
TF_VAR_gitlab_minio_use_https="True"

# Prometheus Stack
TF_VAR_prometheus_alertmanager_domain="alertmanager.${domain_host}"
TF_VAR_prometheus_grafana_domain="grafana.${domain_host}"
TF_VAR_prometheus_ingress_class_name=nginx
TF_VAR_prometheus_prometheus_domain="prometheus.${domain_host}"

TF_VAR_prometheus_persistence_size=10Gi

TF_VAR_prometheus_alertmanager_slack_channel=notification
# From https://api.slack.com/apps -> Settings -> Install App -> Bot User OAtuh Token
TF_VAR_prometheus_alertmanager_slack_credentials=

# From https://min.io/docs/minio/linux/operations/monitoring/collect-minio-metrics-using-prometheus.html?ref=docs-redirect#generate-the-scrape-configuration
#   ```
#   $ kubectl exec -it minio-tenant-0 -nminio--- /bin/bash
#   $ mc config host add minio http://minio.minio-tenant.svc.cluster.local minio <minio_tenant_root_password>
#   $ mc admin prometheus generate minio
#   $ mc admin prometheus generate minio node
#   $ mc admin prometheus generate minio bucket
#   $ mc admin prometheus generate minio resource
TF_VAR_prometheus_minio_job_bearer_token=
TF_VAR_prometheus_minio_job_node_bearer_token=
TF_VAR_prometheus_minio_job_bucket_bearer_token=
TF_VAR_prometheus_minio_job_resource_bearer_token=

# Logging
TF_VAR_logging_module_enable=true

# Elasticsearch
TF_VAR_elasticsearch_storage_size=10Gi
TF_VAR_kibana_ingress_class_name=nginx
TF_VAR_kibana_domain="kibana.${domain_host}"

# Kubecost
TF_VAR_kubecost_ingress_host="cost.${domain_host}"
TF_VAR_kubecost_ingress_class_name=nginx
# generated at http://kubecost.com/install, used for alerts tracking and free trials
TF_VAR_kubecost_token=

# Tailscale
TF_VAR_tailscale_enable=false
# From https://tailscale.com/kb/1085/auth-keys
TF_VAR_tailscale_auth_key=""
TF_VAR_tailscale_advertise_routes="192.86.0.0/24"
TF_VAR_tailscale_hostname=tailscale-kubernetes

# Wireguard
TF_VAR_wireguard_enable=false
TF_VAR_wireguard_ingress_host="vpn.${domain_host}"
TF_VAR_wireguard_port=${wireguard_port}

# ArgoCD
TF_VAR_argocd_domain="argocd.${domain_host}"
TF_VAR_argocd_ssh_known_hosts_base64=""
TF_VAR_argocd_config_repositories_json_encoded="[]"
TF_VAR_argocd_rbac_policy_default="role:readonly"
TF_VAR_argocd_rbac_policy_csv="p, role:power-user, applications, *, */*, allow
p, role:power-user, clusters, get, *, allow
p, role:power-user, repositories, get, *, allow
p, role:power-user, repositories, create, *, allow
p, role:power-user, repositories, update, *, allow
p, role:power-user, repositories, delete, *, allow
# Assign user to power-user
g, my-group, role:power-user"

# OAuth2 Proxy + Auth0
TF_VAR_auth_ingress_class_name=nginx
TF_VAR_auth_oauth2_proxy_host="auth.${domain_host}"
TF_VAR_auth_oauth2_proxy_cookie_domains="[\".${domain_host}\"]"
TF_VAR_auth_oauth2_proxy_whitelist_domains="[\"*.${domain_host}\"]"
TF_VAR_auth_auth0_domain=
TF_VAR_auth_auth0_client_id=
TF_VAR_auth_auth0_client_secret=

# Datadog
TF_VAR_datadog_enable=false
TF_VAR_datadog_cluster_name="homelab"
TF_VAR_datadog_api_key=
TF_VAR_datadog_app_key=
