---
- name: Update and upgrade apt packages
  ansible.builtin.apt:
    update_cache: true
    upgrade: true
    autoclean: true
    autoremove: true

- name: Define list of packages
  ansible.builtin.set_fact:
    kubeadm_pre_setup_packages:
      - net-tools
      - socat
      - conntrack
      - ipvsadm
      - apt-transport-https
      - ca-certificates
      - curl
      - jq
      - ethtool
      - net-tools
      - ipvsadm

- name: Check if packages are installed (Errors will be ignored.)
  ansible.builtin.shell: dpkg-query -s {{ item }} | grep 'install ok installed'
  register: kubeadm_pre_setup_dpkg_check_item
  changed_when: kubeadm_pre_setup_dpkg_check_item.rc != 0
  ignore_errors: true
  loop: "{{ kubeadm_pre_setup_packages }}"

- name: Set kubeadm_pre_setup_dpkg_check fact from results of package check loop
  ansible.builtin.set_fact:
    kubeadm_pre_setup_dpkg_check: "{{ dict(kubeadm_pre_setup_packages | zip(kubeadm_pre_setup_dpkg_check_item.results)) }}"

- name: Install required packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  when: "item not in kubeadm_pre_setup_dpkg_check or (kubeadm_pre_setup_dpkg_check[item].rc != 0)"
  loop: "{{ kubeadm_pre_setup_packages }}"

- name: Load kernel modules and make sure it is loaded after reboots
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  loop:
    - overlay
    - br_netfilter

- name: Add sysctl settings
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_set: true
    reload: true
  loop:
    - { key: "net.bridge.bridge-nf-call-iptables", value: 1 }
    - { key: "net.bridge.bridge-nf-call-ip6tables", value: 1 }
    - { key: "net.ipv4.ip_forward", value: 1 }

- name: Stop and disable apparmor service
  ansible.builtin.systemd:
    name: apparmor
    state: stopped
    enabled: false

- name: Disable automatic updates
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    regexp: "^(APT::Periodic::Unattended-Upgrade)"
    line: 'APT::Periodic::Unattended-Upgrade "0";'
    state: present
